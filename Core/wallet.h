#ifndef WALLET_H
#define WALLET_H

#include "walletdatacore.h"

#include <QList>

class Wallet
{    
protected:
    WalletDataCore      mDataCore;

public:
    Wallet() = default;

    Wallet(const QByteArray iData)
    { WalletDataCoreDeserialize(iData,mDataCore); }

    Wallet(const Wallet &iOther)
    { mDataCore = iOther.walletDataCore(); }

    Wallet(const WalletDataCore &iOther)
    { mDataCore = iOther; }

    WalletDataCore &        walletDataCore()            { return mDataCore; }
    WalletDataCore          walletDataCore() const      { return mDataCore; }

    // Wallet fields
    virtual QString         shortNameType() const       { return WalletDataCoreValueToString(walletDataCore(),QStringLiteral("shortName")); }       // Example: BTC
    virtual QString         longNameType() const        { return WalletDataCoreValueToString(walletDataCore(),QStringLiteral("longName")); }        // Example: Bitcoin
    virtual QString         value() const               { return WalletDataCoreValueToString(walletDataCore(),QStringLiteral("value")); }           // Example: 0.12345678
    virtual QByteArray      privateKey() const          { return WalletDataCoreValueToByteArray(walletDataCore(),QStringLiteral("privateKey")); }
    virtual QByteArray      publicKey() const           { return WalletDataCoreValueToByteArray(walletDataCore(),QStringLiteral("publicKey")); }
    virtual QByteArray      address() const             { return WalletDataCoreValueToByteArray(walletDataCore(),QStringLiteral("address")); }

    virtual void            setShortNameType(const QString iValue)  { WalletDataCoreValueFromString(walletDataCore(),QStringLiteral("shortName"),iValue); }
    virtual void            setLongNameType(const QString iValue)   { WalletDataCoreValueFromString(walletDataCore(),QStringLiteral("longName"),iValue); }
    virtual void            setValue(const QString iValue)          { WalletDataCoreValueFromString(walletDataCore(),QStringLiteral("value"),iValue); }
    virtual void            setPrivateKey(const QByteArray iValue)  { WalletDataCoreValueFromByteArray(walletDataCore(),QStringLiteral("privateKey"),iValue); }
    virtual void            setPublicKey(const QByteArray iValue)   { WalletDataCoreValueFromByteArray(walletDataCore(),QStringLiteral("publicKey"),iValue); }
    virtual void            setAddress(const QByteArray iValue)     { WalletDataCoreValueFromByteArray(walletDataCore(),QStringLiteral("address"),iValue); }

    // Micro-Wallet fields
    virtual QString         walletId() const            { return WalletDataCoreValueToString(walletDataCore(),QStringLiteral("walletId")); }     // Generated by our server
    virtual QString         owner() const               { return WalletDataCoreValueToString(walletDataCore(),QStringLiteral("owner")); }
    virtual bool            isMicroWallet() const       { return (WalletDataCoreValueToUInt(walletDataCore(),QStringLiteral("isMicroWallet")) != 0) ? true : false; }

    virtual void            setWalletId(const QString iValue)       { WalletDataCoreValueFromString(walletDataCore(),QStringLiteral("walletId"),iValue); }
    virtual void            setOwner(const QString iValue)          { WalletDataCoreValueFromString(walletDataCore(),QStringLiteral("owner"),iValue); }
    virtual void            setIsMicroWallet(bool iValue)           { WalletDataCoreValueFromUInt(walletDataCore(),QStringLiteral("isMicroWallet"),(iValue == true ? 1 : 0)); }

    virtual QByteArray      toData() const              { return WalletDataCoreSerialize(walletDataCore()); }

    WalletDataCore operator*()
    { return walletDataCore(); }

    Wallet &operator=(const Wallet &iOther)
    { mDataCore = iOther.walletDataCore(); return *this; }

    Wallet &operator=(const WalletDataCore &iOther)
    { mDataCore = iOther; return *this; }
};

#endif // WALLET_H
